// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cosmos/bank/v1beta1/service.proto

package bankv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ViewService_GetBalance_FullMethodName = "/cosmos.bank.v1beta1.ViewService/GetBalance"
	ViewService_HasBalance_FullMethodName = "/cosmos.bank.v1beta1.ViewService/HasBalance"
)

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewServiceClient interface {
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	HasBalance(ctx context.Context, in *HasBalanceRequest, opts ...grpc.CallOption) (*HasBalanceResponse, error)
}

type viewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewServiceClient(cc grpc.ClientConnInterface) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, ViewService_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) HasBalance(ctx context.Context, in *HasBalanceRequest, opts ...grpc.CallOption) (*HasBalanceResponse, error) {
	out := new(HasBalanceResponse)
	err := c.cc.Invoke(ctx, ViewService_HasBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewServiceServer is the server API for ViewService service.
// All implementations must embed UnimplementedViewServiceServer
// for forward compatibility
type ViewServiceServer interface {
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	HasBalance(context.Context, *HasBalanceRequest) (*HasBalanceResponse, error)
	mustEmbedUnimplementedViewServiceServer()
}

// UnimplementedViewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedViewServiceServer struct {
}

func (UnimplementedViewServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedViewServiceServer) HasBalance(context.Context, *HasBalanceRequest) (*HasBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasBalance not implemented")
}
func (UnimplementedViewServiceServer) mustEmbedUnimplementedViewServiceServer() {}

// UnsafeViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewServiceServer will
// result in compilation errors.
type UnsafeViewServiceServer interface {
	mustEmbedUnimplementedViewServiceServer()
}

func RegisterViewServiceServer(s grpc.ServiceRegistrar, srv ViewServiceServer) {
	s.RegisterService(&ViewService_ServiceDesc, srv)
}

func _ViewService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_HasBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).HasBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_HasBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).HasBalance(ctx, req.(*HasBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ViewService_ServiceDesc is the grpc.ServiceDesc for ViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.bank.v1beta1.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _ViewService_GetBalance_Handler,
		},
		{
			MethodName: "HasBalance",
			Handler:    _ViewService_HasBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/bank/v1beta1/service.proto",
}

const (
	SendService_SendCoins_FullMethodName = "/cosmos.bank.v1beta1.SendService/SendCoins"
)

// SendServiceClient is the client API for SendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendServiceClient interface {
	SendCoins(ctx context.Context, in *SendCoinsRequest, opts ...grpc.CallOption) (*SendCoinsResponse, error)
}

type sendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendServiceClient(cc grpc.ClientConnInterface) SendServiceClient {
	return &sendServiceClient{cc}
}

func (c *sendServiceClient) SendCoins(ctx context.Context, in *SendCoinsRequest, opts ...grpc.CallOption) (*SendCoinsResponse, error) {
	out := new(SendCoinsResponse)
	err := c.cc.Invoke(ctx, SendService_SendCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendServiceServer is the server API for SendService service.
// All implementations must embed UnimplementedSendServiceServer
// for forward compatibility
type SendServiceServer interface {
	SendCoins(context.Context, *SendCoinsRequest) (*SendCoinsResponse, error)
	mustEmbedUnimplementedSendServiceServer()
}

// UnimplementedSendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSendServiceServer struct {
}

func (UnimplementedSendServiceServer) SendCoins(context.Context, *SendCoinsRequest) (*SendCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCoins not implemented")
}
func (UnimplementedSendServiceServer) mustEmbedUnimplementedSendServiceServer() {}

// UnsafeSendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendServiceServer will
// result in compilation errors.
type UnsafeSendServiceServer interface {
	mustEmbedUnimplementedSendServiceServer()
}

func RegisterSendServiceServer(s grpc.ServiceRegistrar, srv SendServiceServer) {
	s.RegisterService(&SendService_ServiceDesc, srv)
}

func _SendService_SendCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).SendCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_SendCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).SendCoins(ctx, req.(*SendCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SendService_ServiceDesc is the grpc.ServiceDesc for SendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.bank.v1beta1.SendService",
	HandlerType: (*SendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCoins",
			Handler:    _SendService_SendCoins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/bank/v1beta1/service.proto",
}

const (
	MetadataService_GetSupply_FullMethodName = "/cosmos.bank.v1beta1.MetadataService/GetSupply"
)

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServiceClient interface {
	GetSupply(ctx context.Context, in *GetSupplyRequest, opts ...grpc.CallOption) (*GetSupplyResponse, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) GetSupply(ctx context.Context, in *GetSupplyRequest, opts ...grpc.CallOption) (*GetSupplyResponse, error) {
	out := new(GetSupplyResponse)
	err := c.cc.Invoke(ctx, MetadataService_GetSupply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility
type MetadataServiceServer interface {
	GetSupply(context.Context, *GetSupplyRequest) (*GetSupplyResponse, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (UnimplementedMetadataServiceServer) GetSupply(context.Context, *GetSupplyRequest) (*GetSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupply not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_GetSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetSupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetSupply(ctx, req.(*GetSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.bank.v1beta1.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupply",
			Handler:    _MetadataService_GetSupply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/bank/v1beta1/service.proto",
}

const (
	MintService_MintCoins_FullMethodName = "/cosmos.bank.v1beta1.MintService/MintCoins"
)

// MintServiceClient is the client API for MintService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MintServiceClient interface {
	MintCoins(ctx context.Context, in *MintCoinsRequest, opts ...grpc.CallOption) (*MintCoinsResponse, error)
}

type mintServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMintServiceClient(cc grpc.ClientConnInterface) MintServiceClient {
	return &mintServiceClient{cc}
}

func (c *mintServiceClient) MintCoins(ctx context.Context, in *MintCoinsRequest, opts ...grpc.CallOption) (*MintCoinsResponse, error) {
	out := new(MintCoinsResponse)
	err := c.cc.Invoke(ctx, MintService_MintCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MintServiceServer is the server API for MintService service.
// All implementations must embed UnimplementedMintServiceServer
// for forward compatibility
type MintServiceServer interface {
	MintCoins(context.Context, *MintCoinsRequest) (*MintCoinsResponse, error)
	mustEmbedUnimplementedMintServiceServer()
}

// UnimplementedMintServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMintServiceServer struct {
}

func (UnimplementedMintServiceServer) MintCoins(context.Context, *MintCoinsRequest) (*MintCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintCoins not implemented")
}
func (UnimplementedMintServiceServer) mustEmbedUnimplementedMintServiceServer() {}

// UnsafeMintServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MintServiceServer will
// result in compilation errors.
type UnsafeMintServiceServer interface {
	mustEmbedUnimplementedMintServiceServer()
}

func RegisterMintServiceServer(s grpc.ServiceRegistrar, srv MintServiceServer) {
	s.RegisterService(&MintService_ServiceDesc, srv)
}

func _MintService_MintCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServiceServer).MintCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MintService_MintCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServiceServer).MintCoins(ctx, req.(*MintCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MintService_ServiceDesc is the grpc.ServiceDesc for MintService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MintService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.bank.v1beta1.MintService",
	HandlerType: (*MintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintCoins",
			Handler:    _MintService_MintCoins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/bank/v1beta1/service.proto",
}
